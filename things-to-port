#!perl


event _http_sms => sub {
  my ($kernel, $self, $request, $response, $dirmatch)
    = @_[ KERNEL, OBJECT, ARG0 .. ARG2 ];

  # Check for errors
  if (! defined $request) {
    $kernel->call('httpd', 'DONE', $response );
    return;
  }

  my $param = $self->_params_from_req($request);

  my $from = $param->{From} // '';
  $from =~ s/\A\+1//;

  my $who = $self->username_for_phone($from);
  unless ($param->{AccountSid} eq $config->{twilio}{sid} and $who) {
    $response->code(400);
    $response->content("Bad request");
    $kernel->call( 'httpd', 'DONE', $response );
    $self->info(sprintf "Bad request for %s from phone %s from IP %s",
      $request->uri->path_query,
      $from,
      $response->connection->remote_ip,
    );
    return;
  }

  my $text = $param->{Body};

  my $reply;
  my $result = $self->_dispatch({
    how   => \$reply,
    who   => $who->username,
    where => [ $from ],
    what  => $text,
  });

  if ($result && $result eq -1) {
    $response->code(200);
    $response->content( $self->_does_not_compute($who) );
  } else {
    $response->code(200);
    $response->content($reply);
  }

  $kernel->call( 'httpd', 'DONE', $response );

  $self->info("Request from " . $response->connection->remote_ip . " " . $request->uri->path_query);
};

sub SAID_eject {
  my ($self, $arg) = @_;
  return -1 unless $arg->{what} eq 'warp core';
  kill 'INT', $$;
}

event nag => sub {
  my ($self) = $_[OBJECT];

  $self->info("considering nagging and setting up next nag");

  $self->delay(nag => 300);

  USER: for my $user ($self->users) {
    next USER unless my $sy_timer = $user->timer;
    my $username = $user->username;

    my $last_nag = $sy_timer->last_relevant_nag;
    my $lp_timer = $self->lp_timer_for_user($user);

    if ($lp_timer && $lp_timer == -1) {
      warn "$username: error retrieving timer\n";
      next USER;
    }

    { # Timer running too long!
      if ($lp_timer && $lp_timer->{running_time} > 3) {
        if ($last_nag && time - $last_nag->{time} < 900) {
          $self->info("$username: Won't nag, nagged within the last 15min.");
          next USER;
        }

        my $msg = "Your timer has been running for "
                . concise(duration($lp_timer->{running_time} * 3600))
                . ".  Maybe you should commit your work.";

        $self->privmsg($user->username, $msg);
        $self->sms($user->phone, $msg) if $user->has_phone;

        $sy_timer->last_nag({ time => time, level => 0 });
        next USER;
      }
    }

    if ($sy_timer->is_showtime) {
      if ($lp_timer) {
        $self->info("$username: We're good: there's a timer.");

        $sy_timer->clear_last_nag;
        next USER;
      }

      my $level = 0;
      if ($last_nag) {
        if (time - $last_nag->{time} < 900) {
          $self->info("$username: Won't nag, nagged within the last 15min.");
          next USER;
        }
        $level = $last_nag->{level} + 1;
      }

      my $still = $level == 0 ? '' : ' still';
      my $msg   = "Your LiquidPlanner timer$still isn't running";
      $self->privmsg($user->username, $msg);
      if ($level >= 2 && $user->has_phone) {
        $self->sms($user->phone, $msg);
      }
      $sy_timer->last_nag({ time => time, level => $level });
    }
  }
};

sub lp_timer_for_user {
  my ($self, $user) = @_;

  return unless my $lp_ua = $user->lp_ua;

  my $res = $lp_ua->get("$LP_BASE/my_timers");
  return -1 unless $res->is_success;

  my ($timer) = grep {; $_->{running} }
                @{ $JSON->decode( $res->decoded_content ) };

  return $timer;
}

has last_msgs => (
  is => 'ro',
  init_arg => undef,
  default  => sub {  {}  },
);

my %ALIAS = (
  say  => 'announce',
  '++' => 'plusplus',
  '+x' => 'addchecklist',
  new  => 'task',
);

sub _dispatch {
  my ($self, $arg) = @_;

  my $msg = $arg->{what};

  if ($msg =~ s{\b(\S+) (?:http://|mailto:)\1 }{$1}g) {
    $self->info("removed Slack-added link");
  }

  my $last_ref = ref $arg->{how}
               ? \do { my $x }
               : \($self->last_msgs->{ $arg->{who} }->{ $arg->{how} });

  if ($msg eq 'commit that') {
    return "Sorry, I don't see a previous message from you." unless $$last_ref;
    local $arg->{what} = "commit: $$last_ref";
    return $self->_dispatch($arg);
  }

  $$last_ref = $msg;

  if (not ref $arg->{how}) {
    $self->last_msgs->{ $arg->{who} }->{ $arg->{how} } = $arg->{what};
  }

  # Genericize these: -- rjbs, 2014-06-19 -- rjbs, 2015-08-06
  $msg = 'chill for 60 minutes' if lc $msg eq 'zzz';
  $msg = 'commit done' if lc $msg eq 'done';

  my ($cmd, $rest) = split ' ', $msg, 2;

  # First pass before stripping things down to alnum.
  $cmd = $ALIAS{$cmd} if $ALIAS{$cmd};

  $cmd =~ tr/[A-Za-z0-9]//dc;
  $cmd = lc $cmd;

  # Second pass for alnum aliases.
  $cmd = $ALIAS{$cmd} if $ALIAS{$cmd};

  my $method = "SAID_$cmd";
  $self->info("looking to call ->$method(" . ($rest // '') . ")");

  my %private = map {; $_ => 1 } qw( eject pose reload );

  return -1 unless $self->can("SAID_$cmd");

  if ($private{$cmd} && $arg->{who} ne $config->{master}) {
    return $self->reply("Only $config->{master} can do that.", $arg);
  }

  return $self->$method({ %$arg, what => $rest });
}

sub SAID_pose {
  my ($self, $arg) = @_;

  unless ($arg->{who} eq $config->{master}) {
    return -1;
  }

  my $what = $arg->{what};

  if ($what =~ s{\A\s*/me\s+}{}g) {
    # emote
  }

  $self->privmsg(
    $config->{irc}{channels}{general},
    $what,
  );

  return;
}

sub SAID_showtime {
  my ($self, $arg) = @_;

  my $user  = $self->user_named($arg->{who});
  my $timer = $user & $user->has_lp_id ? $user->timer : undef;

  return $self->reply("You don't seem to be a LiquidPlanner-enabled user.", $arg)
    unless $timer;

  if ($timer->has_chilltill and $timer->chilltill > time) {
    if ($timer->is_business_hours) {
      $self->reply("Okay, back to work!", $arg);
    } else {
      $self->reply("Back to normal business hours, then.", $arg);
    }
  } elsif ($timer->is_business_hours) {
    $self->reply("I thought it was already showtime!", $arg);
  } else {
    $timer->start_showtime;
    return $self->reply("Okay, business hours extended!", $arg);
  }

  $timer->clear_chilltill;
  return;
}

sub SAID_shows {
  my ($self, $arg) = @_;
  return $self->SAID_chill({ %$arg, what => 'until tomorrow' })
    if $arg->{what} =~ /\s*over\s*[+!.]*\s*/i;
  return -1;
}

sub SAID_chill {
  my ($self, $arg) = @_;

  my $user  = $self->user_named($arg->{who});
  my $lp_ua = $user ? $user->lp_ua : undef;

  return $self->reply("You don't seem to be a LiquidPlanner-enabled user.", $arg)
    unless $lp_ua;

  my $res = $lp_ua->get("$LP_BASE/my_timers");

  if ($res->is_success) {
    my @timers = grep {; $_->{running} }
                 @{ $JSON->decode( $res->decoded_content ) };

    if (@timers) {
      return $self->reply("You've got a running timer!  Use 'commit' instead.", $arg);
    }
  }

  my $sy_timer = $user->timer;

  if ($arg->{what} =~ /^until\s+I'm\s+back\s*$/i) {
    $sy_timer->chill_until_active(1);
    return $self->reply("Okay, I'll stop pestering you until you've active again.", $arg);
  }

  my $time = $self->_parse_time_hunk($arg->{what});
  return -1 unless defined $time;

  if ($time <= time) {
    $self->reply("That sounded like you want to chill until the past.", $arg);
    return;
  }

  $sy_timer->chilltill($time);
  $self->reply("Okay, no more nagging until " . localtime $time, $arg);
}

sub SAID_remind {
  my ($self, $arg) = @_;

  my ($who, $prep, $dur_str, $want_page, $rest) = $arg->{what} =~ qr/\A
    \s*
    (\S+)    # "me" or a nick
    \s+
    (in|at) # duration type
    \s+
    (.+?)    # duration
    (\s+with\s+page\s*)?
    :\s+     # the space is vital:  "at 15:15: eat pie"
    (.+)     # the reminder
    \z
  /x;

  unless (length $who) {
    warn("couldn't parse <<$arg->{what}>>");
    return -1;
  }

  unless ($prep) {
    warn("try 'remind <person> in/at <time>: <reminder>'");
    return -1;
  }

  $who = $self->resolve_name($who, $arg->{who});

  my $time;
  if ($prep eq 'in') {
    my $dur;
    $dur_str =~ s/^an?\s+/1 /;
    my $ok = eval { $dur = parse_duration($dur_str); 1 };
    return -1 unless $ok;
    $time = time + $dur;
  } elsif ($prep eq 'at') {
    my $dt = eval { $self->_date_parser->parse_datetime($dur_str) };
    return -1 unless $dt;
    $time = $dt->epoch;
  } else {
    return -1;
  }

  if ($time <= time) {
    $self->reply("That sounded like you want a reminder sent in the past.", $arg);
    return;
  }

  my $target = $who->username eq $arg->{who} ? 'you' : $who->username;

  $self->alarm_add(
    send_reminder => $time,
    { %$arg, who => $who->username, page => !! $want_page },
    DateTime->now(time_zone => 'America/New_York'),
    $rest,
  );

  $self->reply("Okay, I'll remind $target at " . localtime $time, $arg);
}

event send_reminder => sub {
  my ($self, $reply_arg, $requested_time, $msg) = @_[OBJECT, ARG0..ARG2];

  if (my $phone = $self->phone_for_username($reply_arg->{who})) {
    $self->sms($phone, "Reminder from $requested_time: $msg");
  }

  $self->reply("Reminder from $requested_time: $msg", $reply_arg);
};

sub SAID_abort {
  my ($self, $arg) = @_;

  $self->reply("I didn't understand your abort request.", $arg)
    unless $arg->{what} eq 'timer';

  my $user  = $self->user_named($arg->{who});
  my $lp_ua = $user ? $user->lp_ua : undef;

  return $self->reply("You don't seem to be a LiquidPlanner-enabled user.", $arg)
    unless $lp_ua;

  my $res = $lp_ua->get("$LP_BASE/my_timers");

  return $self->reply("Something went wrong", $arg) unless $res->is_success;

  my ($timer) = grep {; $_->{running} }
                @{ $JSON->decode( $res->decoded_content ) };

  unless ($timer) {
    $self->reply("You don't have an active timer to abort.", $arg);
    return;
  }

  my $stop_res = $lp_ua->post("$LP_BASE/tasks/$timer->{item_id}/timer/stop");
  my $clr_res  = $lp_ua->post("$LP_BASE/tasks/$timer->{item_id}/timer/clear");

  if ($stop_res->is_success and $clr_res->is_success) {
    $user->timer->clear_last_nag;
    $self->reply("Okay, I stopped and cleared your active timer.", $arg);
  } else {
    $self->reply("Something went wrong aborting your timer.", $arg);
  }
}

sub SAID_reset {
  my ($self, $arg) = @_;

  $self->reply("I didn't understand your abort request.", $arg)
    unless $arg->{what} eq 'timer';

  my $user  = $self->user_named($arg->{who});
  my $lp_ua = $user ? $user->lp_ua : undef;

  return $self->reply("You don't seem to be a LiquidPlanner-enabled user.", $arg)
    unless $lp_ua;

  my $res = $lp_ua->get("$LP_BASE/my_timers");

  return $self->reply("Something went wrong", $arg) unless $res->is_success;

  my ($timer) = grep {; $_->{running} }
                @{ $JSON->decode( $res->decoded_content ) };

  unless ($timer) {
    $self->reply("You don't have an active timer to abort.", $arg);
    return;
  }

  my $clr_res  = $lp_ua->post("$LP_BASE/tasks/$timer->{item_id}/timer/clear");

  if ($clr_res->is_success) {
    $self->clear_last_nag;
    $self->reply("Okay, I cleared your active timer but left it running.", $arg);
  } else {
    $self->reply("Something went wrong resetting your timer.", $arg);
  }
}

sub SAID_commit {
  my ($self, $arg) = @_;

  my $comment = $arg->{what};

  my $user  = $self->user_named($arg->{who});
  my $lp_ua = $user ? $user->lp_ua : undef;

  return $self->reply("You don't seem to be a LiquidPlanner-enabled user.", $arg)
    unless $lp_ua;

  my %meta;
  while ($comment =~ s/(?:\A|\s+)(DONE|STOP|CHILL)\z//) {
    $meta{$1}++;
  }

  $meta{DONE} = 1 if $comment =~ /\Adone\z/i;
  $meta{STOP} = 1 if $meta{DONE} or $meta{CHILL};

  my $lp_timer = $self->lp_timer_for_user($user);

  return $self->reply("You don't seem to have a running timer.", $arg)
    unless $lp_timer && ref $lp_timer; # XXX <-- stupid return type

  my $sy_timer = $user->timer;
  return $self->reply("You don't timer-capable.", $arg)
    unless $sy_timer;

  my $task_res = $lp_ua->get("$LP_BASE/tasks/$lp_timer->{item_id}");

  my $activity_id;
  unless ($task_res->is_success) {
    return $self->reply("I couldn't log the work because I couldn't find the current task's activity id.", $arg);
  }

  my $task = $JSON->decode($task_res->decoded_content);
  $activity_id = $task->{activity_id};

  unless ($activity_id) {
    return $self->reply("I couldn't log the work because the task doesn't have a defined activity.", $arg);
  }

  my $content = $JSON->encode({
    is_done => $meta{DONE} ? \1 : \0,
    comment => $comment,
    restart => $meta{STOP} ? \0 : \1,
    activity_id => $activity_id,
  });

  if ($meta{STOP} and ! $sy_timer->chilling) {
    if ($meta{CHILL}) {
      $sy_timer->chill_until_active(1);
    } else {
      # Don't complain 30s after we stop work!  Give us a couple minutes to
      # move on to the next task. -- rjbs, 2015-04-21
      $sy_timer->chilltill(time + 300);
    }
  }

  my $commit_res = $lp_ua->post(
    "$LP_BASE/tasks/$lp_timer->{item_id}/timer/commit",
    Content => $content,
    Content_Type => 'application/json',
  );

  unless ($commit_res->is_success) {
    warn $commit_res->as_string;
    return $self->reply("I couldn't commit your work, sorry.", $arg);
  }

  $sy_timer->clear_last_nag;
  my $also
    = $meta{DONE}  ? " and marked the task done"
    : $meta{CHILL} ? " stopped the timer, and will chill until you're back"
    : $meta{STOP}  ? " and stopped the timer"
    :                "";

  my $time = concise( duration( $lp_timer->{running_time} * 3600 ) );
  $self->reply("Okay, I've committed $time of work$also.", $arg);
}

sub SAID_start {
  my ($self, $arg) = @_;
  my $user  = $self->user_named($arg->{who});
  my $lp_ua = $user ? $user->lp_ua : undef;

  return $self->reply("You don't seem to be a LiquidPlanner-enabled user.", $arg)
    unless $lp_ua;

  if ($arg->{what} =~ /\A[1-9]+\z/) {
    # TODO: make sure the task isn't closed! -- rjbs, 2016-01-25
    # TODO: print the description of the task instead of its number -- rjbs,
    # 2016-01-25
    my $start_res = $lp_ua->post("$LP_BASE/tasks/$arg->{what}/timer/start");
    if ($start_res->{running}) {
      return $self->reply(
        "Started task: $start_res->{item_id} ($LINK_BASE$start_res->{item_id})",
        $arg,
      );
    } else {
      return $self->reply("I couldn't start the timer for $arg->{what}.", $arg);
    }
  } elsif ($arg->{what} eq 'next') {
    my $lp_tasks = $self->lp_tasks_for_user($user, 1);

    unless ($lp_tasks && $lp_tasks->[0]) {
      return $self->reply("I can't get your tasks.", $arg);
    }

    my $task = $lp_tasks->[0];
    my $start_res = $lp_ua->post("$LP_BASE/tasks/$task->{item_id}/timer/start");
    if ($start_res->{running}) {
      return $self->reply(
        "Started task: $task->{name} ($LINK_BASE$task->{id})",
        $arg,
      );
    } else {
      return $self->reply("I couldn't start your next task.", $arg);
    }
  }

  return -1;
}

sub SAID_stop {
  my ($self, $arg) = @_;

  my $user  = $self->user_named($arg->{who});
  my $lp_ua = $user ? $user->lp_ua : undef;

  return $self->reply("You don't seem to be a LiquidPlanner-enabled user.", $arg)
    unless $lp_ua;

  if ($arg->{what} eq 'timer') {
    my $res = $lp_ua->get("$LP_BASE/my_timers");

    return $self->reply("Something went wrong", $arg) unless $res->is_success;

    my ($timer) = grep {; $_->{running} }
                  @{ $JSON->decode( $res->decoded_content ) };

    my $stop_res = $lp_ua->post("$LP_BASE/tasks/$timer->{item_id}/timer/stop");
    unless ($stop_res->is_success) {
      return $self->reply("I couldn't stop your active timer.", $arg);
    }

    $user->timer->clear_last_nag;
    $self->reply("Okay, I stopped your active timer.", $arg);
  } elsif ($arg->{what} =~ /\Ahitting yourself[.!]*\z/) {
    $self->reply("Quit it!  I'm telling mom!", $arg);
  } else {
    $self->reply("I didn't understand your stop request.", $arg);
  }
}

sub master_lp_ua {
  $_[0]->user_named( $config->{master} )->lp_ua;
}

sub SAID_status {
  my ($self, $arg) = @_;
  my $uptime = duration(time - $^T);
  return $self->reply("Online for $uptime.", $arg);
}

sub SAID_whats {
  my ($self, $arg) = @_;
  return $self->SAID_what({ %$arg, what => "is $arg->{what}" });
}

sub _fmt_ph {
  my ($self, $ph) = @_;

  my ($c, $ac, $ex, $rest) = $ph =~ m{
    \A
    ([0-9])? ([0-9]{3}) ([0-9]{3}) ([0-9]{4})
    \z
  }x;

  $c //= 1;

  return "+$c $ac $ex-$rest";
}

sub SAID_who {
  my ($self, $arg) = @_;
  my $what = $arg->{what};
  $what =~ s/\s*\?*\z//;
  return -1 unless $what =~ s/\Ais\s+//;

  my $who = $self->resolve_name($what, $arg->{who});
  return $self->reply(qq!I don't know who "$what" is.!, $arg) if ! $who;

  my $whois = sprintf "%s (%s)", $who->username, $who->realname;

  if ($what eq $who->username) {
    return $self->reply(qq{"$what" is $whois.}, $arg);
  }

  return $self->reply(qq["$what" is an alias for $whois.], $arg);
}

sub SAID_what {
  my ($self, $arg) = @_;
  my $what = $arg->{what};
  $what =~ s/\s*\?*\z//;
  return -1 unless $what =~ s/\Ais //;

  if ($what =~ /\Ayour (?:phone )?number\z/) {
    my $num = $self->_fmt_ph($config->{twilio}{from});
    return $self->reply("You can text me at $num.", $arg);
  }

  if ($what =~ /\A(\S+?)(?:'s)? (?:phone )?number\z/) {
    my $who  = $1;
    my $user = $self->resolve_name($who, $arg->{who});

    my $name = $user ? $user->username : $who;

    return $self->reply("I don't have a number on file for $name.", $arg)
      unless $user && $user->has_phone;

    my $num = $self->_fmt_ph($user->phone);
    return $self->reply(
      sprintf("You can reach %s at %s.", $user->username, $user->phone),
      $arg,
    );
  }

  return -1;
}

sub SAID_reload {
  my ($self, $arg) = @_;

  return -1 unless $arg->{what} eq 'config';

  $config = YAML::XS::LoadFile($ENV{SYNERGY_CONFIG});

  # All of these are potentially invalidated by a config reload. -- rjbs,
  # 2014-06-10
  $self->_clear_users;

  return $self->reply("Configuration reloaded.", $arg);
}

my %HELP = (
  abort    => "abort timer -- stop and clear the timer (LP users only)",
  ack      => "ack ALERTID [for DURATION] -- acknowledge an alert",
  alerts   => "alerts -- list active Circonus alerts",
  announce => "announce MESSAGE -- say something on IRC, for use via SMS",
  chill    => "chill [until TIME | for DURATION] -- stop nagging for a while (LP users only)",
  oncall   => "oncall -- list on call users; also, (oncall add SOMEBODY, oncall remove SOMEBODY, oncall set SOMEBODY...)",
  page     => "page SOMEBODY: message -- send an SMS to a user",
  remind   => "remind SOMEBODY [at TIME | in DURATION] -- set up a reminder",
  reset    => "reset timer -- clear the timer, leave it running (LP user onlys)",
  showtime => "showtime -- stop chilling, start nagging",
  start    => "start [TASKID] -- start next upcoming task, or task ID TASKID ",
  tasks    => "tasks [ N ] -- see your upcoming 5 tasks, or 'page' N of your tasks ",
  timer    => "timer -- show timer status (LP users only)",
  stop     => "stop timer -- stop the current timer (LP users only)",
  task     => "task for SOMEBODY: TASK -- make a new task in Liquid Planner",
  what     => "what's SOMEBODY's number -- get a user's phone number",
);

sub SAID_help {
  my ($self, $arg) = @_;

  unless (length $arg->{what}) {
    return $self->reply("known commands: " . (join q{, }, sort keys %HELP), $arg);
  }

  my $help = $HELP{$arg->{what}};

  return $self->reply("unknown command", $arg) unless $help;
  return $self->reply($help, $arg);
}
