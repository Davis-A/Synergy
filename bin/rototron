#!perl
use v5.24.0;
use warnings;
use utf8;

use charnames qw( :full );
use experimental qw(lexical_subs signatures);

use DateTime;

use Getopt::Long::Descriptive;
use JSON::MaybeXS;

use Synergy::Rototron;
use Synergy::UserDirectory;

binmode *STDOUT, 'encoding(:utf-8)';

my ($opt, $desc) = describe_options(
  '%c %o',
  [ 'config|c=s', 'config file path',     { default => 'rototron.json' } ],
  [ 'debug|d',    'print more stuff',                                    ],
  [ 'really|r',   'really make changes',                                 ],
);

# This is silly, because we do this in the Rototron too, but.
my $config = do {
  open my $fh, '<', $opt->config or die "can't read config: $!";
  my $json = do { local $/; <$fh> };
  JSON::MaybeXS->new->utf8(1)->decode($json);
};

my $directory = Synergy::UserDirectory->new({ dbfile => $config->{dbfile} });
$directory->load_users_from_database;

my $rototron = Synergy::Rototron->new({
  config_path => $opt->config,
  user_directory => $directory,
});

# We want to populate out 90d, plus enough days to get us to a Friday.
my $start = DateTime->today;
my $days  = 90 + 6 - $start->day_of_week % 7;
my $end   = $start->clone->add(days => $days);

my $plan = $rototron->compute_rotor_update($start, $end);

if ($opt->debug) {
  print $plan ? JSON::MaybeXS->new->pretty->canonical->encode($plan) : "{}\n";
}

unless ($opt->really) {
  if ($plan) {
    printf "DRY RUN: update: %u\n",  0 + keys($plan->{update}->%*);
    printf "DRY RUN: create: %u\n",  0 + keys($plan->{create}->%*);
    printf "DRY RUN: destroy: %u\n", 0 + $plan->{destroy}->@*;
  } else {
    say "DRY RUN: no action required";
  }

  exit;
}

exit unless $plan;

my $res = $rototron->jmap_client->request([
  [ 'CalendarEvent/set' => $plan, ],
]);

$res->assert_successful;

if ($opt->debug) {
  print JSON::MaybeXS->new->pretty->canonical->encode(
    $res->sentence_named('CalendarEvent/set')->as_stripped_pair,
  );
}

